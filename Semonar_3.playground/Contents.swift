import Foundation


//Создать массив [5, 6, -14, 25], а затем создать новую переменную с отсортированным по возрастанию ранее созданным массивом.
var arr1 = [5, 6, -14, 25]
var arr2 = arr1.sorted()
arr1.sort(by: <)

//Создать массив,  а затем создать переменную, в которой будет хранится ранее созданные массив, но в нем каждое значение должно быть увеличено на 5.
var arr3 = arr1.map{($0 + 5)}

//Создать массив,  а затем создать переменную, в которой будет хранится ранее созданные массив, но в нем не должно быть ни отрицательных чисел, ни числа 12, а также каждое значение должно быть увеличено в 2 раза.
var arr4 = arr3.map { $0 * 2 }.filter { $0 > 0 && $0 != 12 }
print(arr4)

//Создать словарь, в котором ключ будет целым числом, а значение строкой
var dict1: [Int: String] = [:]

//Создать массив [2, 6, 25, 4, 2, 2, 10, 2], затем создать новую переменную, в которой будут те же значения, что и в ранее созданном массиве, но не должно быть повторяющихся значений.
var arr5 = [2, 6, 25, 4, 2, 2, 10, 2]
var test1 = Set(arr5)
print(arr5)

//Написать функцию, которая на вход принимает массив целых чисел, а возвращает true или false. true, если результат сложения всех чисел массива больше или равно 100, false, если меньше 100
func filterArr(array: [Int]) -> Bool {
    array.reduce(0, +) >= 100
}

//Создать переменную, в которой будет хранится замыкание, в которое передается словарь с ключом типа Int и значением типа String, а в ходе выполнения замыкания в консоль печатаются все значения словаря, ключ у которых больше 5
let closure = { (dict: [Int: String]) in
    for (k, v) in dict {
        if k > 5 {
            print(v)
        }
    }
}

//Задачи:
//Создать перечисление, которое имеет в виде кейсов три вида чая: зеленый, черный и фруктовый. Затем создать словарь, в котором ключ это вид чая, а значение это стоимость и заполнить этот словарь.
enum TeaType {
    case green
    case black
    case fruit
}
var dict: [TeaType: Double] = [.black: 2, .green: 1, .fruit: 0.5]

//Написать функцию, которая на вход принимает такой же словарь, как в задании 1, а возвращает новый, который создан по следующим правилам: у фруктового чая стоимость должна быть увеличена на 30%, у черного уменьшена в 1.6 раза, а у зеленого уменьшена на 9.5%
func teaPrice(teaDict: [TeaType: Double]) -> [TeaType: Double] {
    var newDictTea =  [TeaType: Double]()
    for (k, v) in teaDict {
        switch k {
        case .fruit:
            newDictTea.updateValue(v + 30, forKey: k)
        case .black:
            newDictTea.updateValue(v / 1.6, forKey: k)
        case .green:
            newDictTea.updateValue(v + 1.3, forKey: k)
        }
    }
    return newDictTea
}

//Написать функцию, которая на вход принимает два целочисленных массива, которые содержат координаты начала и конца отрезка соответственно. Первый элемент массива это x, а второй y. Функция должна вернуть массив, который содержит координаты середины отрезка
func coordinateNew(oneArr: [Int], twoArr: [Int]) -> [Int] {
    guard oneArr.count == 2 && twoArr.count == 2 else {
        return []
    }
    return [(oneArr[0] + twoArr[0]) / 2, (oneArr[1] + twoArr[1]) / 2 ]
}

//Написать функцию, которая на вход принимает массив из 4 целых чисел (если чисел меньше или больше должно вернуться nil). Функция возвращает новый массив, который состоит из 3 элементов, первый элемент это первый элемент переданного массива, второй элемент это сумма второго и третьего элемента (индексы 1 и 2) переданного массива, последний элемент это последний элемент переданного массива. Также этот массив должен быть отсортирован по убыванию.
func newArray(arrayNew: [Int]) -> [Int]? {
    guard arrayNew.count == 4 else {
        return nil
    }
    return [arrayNew[0], arrayNew[1] + arrayNew[2], arrayNew[3]].sorted(by: >)
}

//Создайте массив, который состоит из всех целых чисел от 1 до 50
let arr7 = Array(1...50)

//Напишите замыкание, которое принимает на вход два целых числа и возвращает их сумму, затем вызовите это замыкание
let cl = { (a: Int, b: Int) -> Int in
    a + b
}

//Напишите функцию, которая на вход будет принимать замыкание, которое на вход принимает целое число, но ничего не возвращает. Функция также не должна ничего возвращать. Внутри функции должен печататься тип замыкания
func testElse(closure: (Int) -> Void) {
    print(type(of: closure))
}
testElse { number in
    number + 5
}

//Создать массив и при помощи forEach вывести в консоль все значения

var a = [1,5,3,6,7,3,2,7,0]
a.forEach {print($0)}


struct Coffee {
    var name: String
    var isSugar: Bool
    var isIce: Bool
    var cost: Double = 110 {
        willSet(newCost) {
            print("Новая стоимость кофе \(newCost)")
        }
        didSet {
            print("Старая стоимость кофе \(oldValue)")
        }
    }
    var size: Int {
        get {
            let sugarSize = isSugar ? 50 : 20
            let iceSize = isIce ? 50: 10
            let coffeeSize = 100 + sugarSize + iceSize
            return coffeeSize
        }
    }
}

var latte = Coffee(name: "Latte", isSugar: true, isIce: false)
latte.cost = 150
latte.size

